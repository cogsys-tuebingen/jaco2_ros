#!/usr/bin/env python
PACKAGE = "jaco2_driver"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()



gen.add("trajectory_p_gain_joint_0", double_t, 0, "follow trajactory p gain for joint 0", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_1", double_t, 0, "follow trajactory p gain for joint 1", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_2", double_t, 0, "follow trajactory p gain for joint 2", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_3", double_t, 0, "follow trajactory p gain for joint 3", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_4", double_t, 0, "follow trajactory p gain for joint 4", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_5", double_t, 0, "follow trajactory p gain for joint 5", 11.29063216, -100, 100)

gen.add("trajectory_i_gain_joint_0", double_t, 0, "follow trajactory i gain for joint 0", 0, -100, 100)
gen.add("trajectory_i_gain_joint_1", double_t, 0, "follow trajactory i gain for joint 1", 0, -100, 100)
gen.add("trajectory_i_gain_joint_2", double_t, 0, "follow trajactory i gain for joint 2", 0, -100, 100)
gen.add("trajectory_i_gain_joint_3", double_t, 0, "follow trajactory i gain for joint 3", 0, -100, 100)
gen.add("trajectory_i_gain_joint_4", double_t, 0, "follow trajactory i gain for joint 4", 0, -100, 100)
gen.add("trajectory_i_gain_joint_5", double_t, 0, "follow trajactory i gain for joint 5", 0, -100, 100)

gen.add("trajectory_d_gain_joint_0", double_t, 0, "follow trajactory d gain for joint 0", 0, -100, 100)
gen.add("trajectory_d_gain_joint_1", double_t, 0, "follow trajactory d gain for joint 1", 0, -100, 100)
gen.add("trajectory_d_gain_joint_2", double_t, 0, "follow trajactory d gain for joint 2", 0, -100, 100)
gen.add("trajectory_d_gain_joint_3", double_t, 0, "follow trajactory d gain for joint 3", 0, -100, 100)
gen.add("trajectory_d_gain_joint_4", double_t, 0, "follow trajactory d gain for joint 4", 0, -100, 100)
gen.add("trajectory_d_gain_joint_5", double_t, 0, "follow trajactory d gain for joint 5", 0, -100, 100)

gen.add("gripper_p_gain_finger_1", double_t, 0, "position p gain for finger 1", 10, -6000, 6000)
gen.add("gripper_p_gain_finger_2", double_t, 0, "position p gain for finger 2", 10, -6000, 6000)
gen.add("gripper_p_gain_finger_3", double_t, 0, "position p gain for finger 3", 10, -6000, 6000)

gen.add("gripper_i_gain_finger_1", double_t, 0, "position i gain for finger 1", 0, -6000, 6000)
gen.add("gripper_i_gain_finger_2", double_t, 0, "position i gain for finger 2", 0, -6000, 6000)
gen.add("gripper_i_gain_finger_3", double_t, 0, "position i gain for finger 3", 0, -6000, 6000)

gen.add("gripper_d_gain_finger_1", double_t, 0, "positiond gain for finger 1", 0, -6000, 6000)
gen.add("gripper_d_gain_finger_2", double_t, 0, "position d gain for finger 2", 0, -6000, 6000)
gen.add("gripper_d_gain_finger_3", double_t, 0, "position d gain for finger 3", 0, -6000, 6000)

gen.add("gipper_controller_finger_vel_1", double_t, 0, "closing velocity finger 1", 3500, -6000, 6000)
gen.add("gipper_controller_finger_vel_2", double_t, 0, "closing velocity finger 2", 3500, -6000, 6000)
gen.add("gipper_controller_finger_vel_3", double_t, 0, "closing velocity finger 3", 3500, -6000, 6000)

gen.add("state_pri_update_ratio", int_t, 0, "gives the ratio between high priority updates and low priority updates",3,1,10);


exit(gen.generate(PACKAGE, "jaco2_driver", "jaco2_driver_configure"))
