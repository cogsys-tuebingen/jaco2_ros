#!/usr/bin/env python
PACKAGE = "jaco2_driver"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("velocity_controller_p_gain", double_t, 0, "velocity controller p gain", 0, -100, 100)
gen.add("velocity_controller_i_gain", double_t, 0, "velocity controller i gain", 0.1, -100, 100)
gen.add("velocity_controller_d_gain", double_t, 0, "velocity controller d gain", 0.0, -100, 100)

gen.add("torque_controller_p_gain", double_t, 0, "torque controller p gain", 0.82, -100, 100)
gen.add("torque_controller_i_gain", double_t, 0, "torque controller i gain", 0.88, -100, 100)
gen.add("torque_controller_d_gain", double_t, 0, "torque controller d gain", 0.0, -100, 100)

gen.add("torque_controller_p_q_gain", double_t, 0, "torque controller desired position p gain", 1.0, -100, 100)
gen.add("torque_controller_i_q_gain", double_t, 0, "torque controller desired position i gain", 0.0, -100, 100)
gen.add("torque_controller_d_q_gain", double_t, 0, "torque controller desired position d gain", 0.0, -100, 100)


gen.add("trajectory_p_gain_joint_0", double_t, 0, "follow trajactory p gain for joint 0", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_1", double_t, 0, "follow trajactory p gain for joint 1", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_2", double_t, 0, "follow trajactory p gain for joint 2", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_3", double_t, 0, "follow trajactory p gain for joint 3", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_4", double_t, 0, "follow trajactory p gain for joint 4", 11.29063216, -100, 100)
gen.add("trajectory_p_gain_joint_5", double_t, 0, "follow trajactory p gain for joint 5", 11.29063216, -100, 100)

gen.add("trajectory_i_gain_joint_0", double_t, 0, "follow trajactory i gain for joint 0", 0, -100, 100)
gen.add("trajectory_i_gain_joint_1", double_t, 0, "follow trajactory i gain for joint 1", 0, -100, 100)
gen.add("trajectory_i_gain_joint_2", double_t, 0, "follow trajactory i gain for joint 2", 0, -100, 100)
gen.add("trajectory_i_gain_joint_3", double_t, 0, "follow trajactory i gain for joint 3", 0, -100, 100)
gen.add("trajectory_i_gain_joint_4", double_t, 0, "follow trajactory i gain for joint 4", 0, -100, 100)
gen.add("trajectory_i_gain_joint_5", double_t, 0, "follow trajactory i gain for joint 5", 0, -100, 100)

gen.add("trajectory_d_gain_joint_0", double_t, 0, "follow trajactory d gain for joint 0", 0, -100, 100)
gen.add("trajectory_d_gain_joint_1", double_t, 0, "follow trajactory d gain for joint 1", 0, -100, 100)
gen.add("trajectory_d_gain_joint_2", double_t, 0, "follow trajactory d gain for joint 2", 0, -100, 100)
gen.add("trajectory_d_gain_joint_3", double_t, 0, "follow trajactory d gain for joint 3", 0, -100, 100)
gen.add("trajectory_d_gain_joint_4", double_t, 0, "follow trajactory d gain for joint 4", 0, -100, 100)
gen.add("trajectory_d_gain_joint_5", double_t, 0, "follow trajactory d gain for joint 5", 0, -100, 100)

gen.add("collision_threshold", double_t, 0, "collision threshold", 3, -100, 100)

gen.add("collision_reflex_gain_joint_0", double_t, 0, "collision reflex gain for joint 0", 0.25, -100, 100)
gen.add("collision_reflex_gain_joint_1", double_t, 0, "collision reflex gain for joint 1", 0.15, -100, 100)
gen.add("collision_reflex_gain_joint_2", double_t, 0, "collision reflex gain for joint 2", 0.15, -100, 100)
gen.add("collision_reflex_gain_joint_3", double_t, 0, "collision reflex gain for joint 3", 0.15, -100, 100)
gen.add("collision_reflex_gain_joint_4", double_t, 0, "collision reflex gain for joint 4", 0.15, -100, 100)
gen.add("collision_reflex_gain_joint_5", double_t, 0, "collision reflex gain for joint 5", 0.15, -100, 100)

gen.add("gripper_p_gain_finger_1", double_t, 0, "position p gain for finger 1", 10, -6000, 6000)
gen.add("gripper_p_gain_finger_2", double_t, 0, "position p gain for finger 2", 10, -6000, 6000)
gen.add("gripper_p_gain_finger_3", double_t, 0, "position p gain for finger 3", 10, -6000, 6000)

gen.add("gripper_i_gain_finger_1", double_t, 0, "position i gain for finger 1", 0, -6000, 6000)
gen.add("gripper_i_gain_finger_2", double_t, 0, "position i gain for finger 2", 0, -6000, 6000)
gen.add("gripper_i_gain_finger_3", double_t, 0, "position i gain for finger 3", 0, -6000, 6000)

gen.add("gripper_d_gain_finger_1", double_t, 0, "positiond gain for finger 1", 0, -6000, 6000)
gen.add("gripper_d_gain_finger_2", double_t, 0, "position d gain for finger 2", 0, -6000, 6000)
gen.add("gripper_d_gain_finger_3", double_t, 0, "position d gain for finger 3", 0, -6000, 6000)

gen.add("gipper_controller_finger_vel_1", double_t, 0, "closing velocity finger 1", 3500, -6000, 6000)
gen.add("gipper_controller_finger_vel_2", double_t, 0, "closing velocity finger 2", 3500, -6000, 6000)
gen.add("gipper_controller_finger_vel_3", double_t, 0, "closing velocity finger 3", 3500, -6000, 6000)

gen.add("state_pri_update_ratio", int_t, 0, "gives the ratio between high priority updates and low priority updates",3,1,10)

gen.add("state_high_pri_pos", bool_t, 0, "read angular positions with high priority", True)
gen.add("state_high_pri_vel", bool_t, 0, "read angular velocity with high priority", True)
gen.add("state_high_pri_acc", bool_t, 0, "read acceleration sensor with high priority", True)
gen.add("state_high_pri_torque", bool_t, 0, "read angular torque with high priority", True)
gen.add("state_high_pri_torque_g_free", bool_t, 0, "read gravity free torque with high priority", True)
gen.add("state_high_pri_current", bool_t, 0, "read current with high priority", False)
gen.add("state_high_pri_status", bool_t, 0, "read status with high priority", False)
gen.add("state_high_pri_info", bool_t, 0, "read info with high priority", False)

gen.add("state_low_pri_pos", bool_t, 0, "read angular positions with low priority", False)
gen.add("state_low_pri_vel", bool_t, 0, "read angular velocity with low priority", False)
gen.add("state_low_pri_acc", bool_t, 0, "read acceleration sensor low high priority", False)
gen.add("state_low_pri_torque", bool_t, 0, "read angular torque with low priority", False)
gen.add("state_low_pri_torque_g_free", bool_t, 0, "read gravity free torque with low priority", False)
gen.add("state_low_pri_current", bool_t, 0, "read current with low priority", False)
gen.add("state_low_pri_status", bool_t, 0, "read status with low priority", True)
gen.add("state_low_pri_info", bool_t, 0, "read info with low priority", True)


exit(gen.generate(PACKAGE, "jaco2_driver", "jaco2_driver_configure"))
